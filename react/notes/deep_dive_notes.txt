# Deep Dive: Props, State, and this - Part 1 ------------------------------>
    > Part of the reason why React is so popular, is because it follows a 
    component base design pattern. That design pattern means that instead
    of thinking of an entire program as one giant system, you think of it 
    as a series of connected components.

    > A functional component is what's called a 'dumb' component because 
    it doesnt not have a lot of behavior. It should not have state. It simply
    just renders a component. 

    > If you have a component that needs to have state, then you want to 
    use a class-based component. That's where you can use methods and 
    manage state. It simply has more advanced behavior. 

    > State gives you the ability to track users' behavior as they navigate
    through the system, and also keeps track of different values. 

# Deep Dive: Component Lifecycle in React --------------------------------->
    > Each component has several 'lifecycle methods' that you can override to 
    run code at particular times in the process: 
    1. Mounting process - the stage where we pick out what kinds of data and 
    processes need to occur when that component is going to load; called when 
    an instance of a component is being created and inserted into the DOM.
    
    2. Updating - An update can be caused by changes to props or state. They 
    are called when a component is being re-rendered. 

    3. Unmounting - Called when a component is being removed from the DOM. 




















**** Extras
React Skeleton Fix
The React Skeleton's webpack has an error. 
In the package.json file, change the webpack-cli version to 3.3.1 
and run the following command to install two npm packages:
 > npm i babel-preset-es2015 babel-preset-stage-1