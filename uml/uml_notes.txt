# Overview of Use Case Diagrams Elements ------------------------------>
    > Elements - use cases, actors, subsystems, relationships
    > Subsystems in a use case diagram are represented by large
    rectangular boxes that have use cases and different elements
    inside of them; shows where these types of use cases are actually going 
    to occur. 
    > Relationships are represented by dotted lines with open arrows;
    it shows how you can go from one use case to another; gives the ability 
    to connect your actors directly to the use cases and to the elements
    and actions that they have access to in the system.

QUIZ
1. If the web dashboard says "generate forms" then it tells us that we have 
a number of components to build. - TRUE

2. Relationships are represented by lines and filled in arrows. - FALSE

3. Subsystems are also called system boundaries. - TRUE

4. Subsystems in a use case diagram are represented by large rectangular 
boxes that have different elements inside them. - TRUE

5. An actor can only be an admin or customer. - FALSE

6. One of the reasons that you would build this type of diagram is 
to set up authorization rules. -  TRUE

=============================================================================

# Overview of Deployment Diagram Elements ---------------------------->
    > The six elements that make up a deployment diagram:
    nodes, components, artifacts, links, dependencies, associations

    > Essentially, every component of a deployment diagram is a node. The
    node itself is the actual real-world component

    > A component could be an application, web service, API, database, 
    or many other things. It's typically the actual piece of software
    that manages communication and handles the business logic for 
    the node that it resides on; You need to be able to visualize and 
    represent your system in a way that makes sense

    > Artifacts are model elements that represent the physical entities
    in a software system; surrounded by angle brackets

    > Links are the lines that are connecting each one of the nodes.

    > Dependencies are represented by dotted lines with arrows going in
    the direction of the node. It shows what other nodes it depends on.

    > Association is a way of connecting all of the nodes and showing
    how they're associated. 

QUIZ 
1. Deployment diagrams help in deciding the architecture for a system. -  TRUE

2. The node does not represent the real world component within the 
diagram. - FALSE

3. Artifacts are items that are surrounded by what kind of brackets? - <>

4. The artifact is very descriptive so that the architect knows what 
needs to be configured. - TRUE

5. If we want to be more specific about our terms we can add 
dependencies. - TRUE

=============================================================================

# Overview of Package Diagram Elements ----------------------------->
    > Package diagrams are a way to wrap some of the other components from 
    other diagrams and what they represent; they allow us to take our other
    different components insisde of the system and show how they relate to 
    each other and you can show dependencies and other elements; they 
    represent the structure of your software at a high-level and shows
    how it can be composed and how each element is connected.

    > Abstract elements: type, classifier
    > elements: class, use case, component, package, dependency, event

=============================================================================

# Overview of Sequence Diagram Elements ----------------------------->
    > Allows you to pick and choose and isolate all of the elements and 
    see how they should communicate with each other; allows you to 
    isolate all of the different communication occurences that will 
    happen to a participant 
    > Elements: class roles (participants), messages, lifelines, 
    activation (execution occurence)

    > Class Roles (Participants) is shown using the notation for a class, 
    but the class name is preceded by a forward slash followed by the name
    of the role that objects must conform to in order to participate within
    the role, followed by a colon

    > Activation (Execution Occurence) - illustrated by a vertical pipe-
    like item; they are the event when something transpires when it either
    receives a message or when it sends it. 

    > Message - represented by lines with arrows going in the direction 
    that the message is being sent; it has the ability to take in some 
    kind of input, send output, and in some cases it can receive output 

    > Lifelines - illustrated by dotted lines; the represent making it 
    easier for us to see each one of the stages and to give a spot where
    the messages can be sent

QUIZ
1. Sequence diagrams are good to use when you are building large projects. - TRUE

2. Lifelines make it easier for us to see each of the stages and give a 
place for the messages to be sent. - TRUE

3. A message is not a method that you can use to send and recieve input. - FALSE

4. Activation or Execution Occurrence is the sending or recieving 
of a message. - TRUE

5. Sequence diagrams will not let you isolate all of the different 
communication occurences. - FALSE

6. Sequence diagram allows you to drill down so that you can pick and 
choose the elements and how they should communicate. -  TRUE

7. Sequence diagrams allow you to visualize all of the messages 
that are being passed between the components of your system. - TRUE

=============================================================================

# Overview of State Machine Diagram Elements ----------------------------->
    > Allows us to visualize what a feature of our application will look 
    like and how it will transition from one state into another state; cares
    more about the different actions that can change a user's state; the 
    main goal is to visualize the state of whatever object you're trying
    to follow 
    > A good time to use a state machine diagram is when building an approval
    engine
    > Elements: entry point, choice, constraint, state, transition 

    > Entry Point - illustrated by a loarge filled in black dot and it is 
    the start

    > Choice - its' where questions are being asked; represented by a 
    45-degree angle square

    > Constraint - a way of being able to ask a question 

    > State - illustrated by a rounded edge rectangle

    > Transition - how you get from one state to another; represented by
    a line with an arrow showing the direction of that transition

QUIZ 
1. A state machine cares more about the different actions that can change 
a user's state. - TRUE

2. Transition is how you stop at a state and head to the constant. - FALSE

3. Try to keep your state diagrams as simple as possible. -  TRUE
